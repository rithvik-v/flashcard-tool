# Project Structure
flashcard-tool/
├── public/
│   └── index.html
├── src/
│   ├── App.js
│   ├── Flashcard.js
│   ├── Dashboard.js
│   ├── index.js
│   └── index.css
├── .gitignore
├── package.json
└── README.md

# public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flashcard Tool</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div id="root"></div>
</body>
</html>

# src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);

# src/App.js
import React, { useState } from 'react';
import Flashcard from './Flashcard';
import Dashboard from './Dashboard';

function App() {
    const [flashcards, setFlashcards] = useState([
        { id: 1, question: 'What is React?', answer: 'A JavaScript library for building user interfaces' },
        { id: 2, question: 'What is a component?', answer: 'A reusable piece of UI' },
        { id: 3, question: 'What is state?', answer: 'An object that represents the parts of an app that can change' },
    ]);

    const [currentIndex, setCurrentIndex] = useState(0);

    const handleNext = () => {
        setCurrentIndex((prevIndex) => (prevIndex + 1) % flashcards.length);
    };

    const handlePrevious = () => {
        setCurrentIndex((prevIndex) => (prevIndex - 1 + flashcards.length) % flashcards.length);
    };

    return (
        <div className="App">
            <h1>Flashcard Learning Tool</h1>
            <Flashcard
                flashcard={flashcards[currentIndex]}
                onNext={handleNext}
                onPrevious={handlePrevious}
            />
            <Dashboard flashcards={flashcards} setFlashcards={setFlashcards} />
        </div>
    );
}

export default App;

# src/Flashcard.js
import React, { useState } from 'react';

function Flashcard({ flashcard, onNext, onPrevious }) {
    const [flipped, setFlipped] = useState(false);

    const handleFlip = () => {
        setFlipped((prevFlipped) => !prevFlipped);
    };

    return (
        <div className="flashcard" style={{ border: '1px solid #ccc', padding: '20px', margin: '20px', textAlign: 'center', cursor: 'pointer' }} onClick={handleFlip}>
            <div style={{ fontSize: '24px', marginBottom: '10px' }}>
                {flipped ? flashcard.answer : flashcard.question}
            </div>
            <div className="navigation">
                <button onClick={(e) => { e.stopPropagation(); onPrevious(); }}>Previous</button>
                <button onClick={(e) => { e.stopPropagation(); onNext(); }}>Next</button>
            </div>
        </div>
    );
}

export default Flashcard;

# src/Dashboard.js
import React, { useState } from 'react';

function Dashboard({ flashcards, setFlashcards }) {
    const [newFlashcard, setNewFlashcard] = useState({ question: '', answer: '' });

    const handleAddFlashcard = () => {
        if (newFlashcard.question && newFlashcard.answer) {
            setFlashcards([...flashcards, { id: flashcards.length + 1, ...newFlashcard }]);
            setNewFlashcard({ question: '', answer: '' });
        }
    };

    return (
        <div className="dashboard" style={{ marginTop: '20px' }}>
            <h2>Dashboard</h2>
            <input
                type="text"
                placeholder="Question"
                value={newFlashcard.question}
                onChange={(e) => setNewFlashcard({ ...newFlashcard, question: e.target.value })}
                style={{ marginRight: '10px' }}
            />
            <input
                type="text"
                placeholder="Answer"
                value={newFlashcard.answer}
                onChange={(e) => setNewFlashcard({ ...newFlashcard, answer: e.target.value })}
                style={{ marginRight: '10px' }}
            />
            <button onClick={handleAddFlashcard}>Add Flashcard</button>
        </div>
    );
}

export default Dashboard;

# src/index.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

.App {
    text-align: center;
}

.flashcard {
    transition: transform 0.6s;
}

.dashboard {
    margin-top: 20px;
}

# .gitignore
node_modules/

# package.json
{
  "name": "flashcard-tool",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "5.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

# README.md
# Flashcard Learning Tool

A simple React application for learning with flashcards.

## Getting Started

### Prerequisites

- Node.js (v14 or higher)

### Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/flashcard-tool.git
   cd flashcard-tool
   npm install
   npm start

   ### Instructions
1. Create a new folder for your project called `flashcard-tool`.
2. Inside that folder, create the necessary subfolders (`public` and `src`).
3. Create each file and copy the corresponding code into them.
4. Follow the setup instructions to run and deploy your app.

Let me know if you need any more help!
